<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on 오뚝이 개발자</title>
    <link>https://osmin625.github.io/categories/Development/</link>
    <description>Recent content in Development on 오뚝이 개발자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 13 Feb 2023 13:00:00 +0900</lastBuildDate>
    <atom:link href="https://osmin625.github.io/categories/Development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>나를 위한 Docker 총정리</title>
      <link>https://osmin625.github.io/posts/docker/</link>
      <pubDate>Mon, 13 Feb 2023 13:00:00 +0900</pubDate>
      <guid>https://osmin625.github.io/posts/docker/</guid>
      <description>눈송이 서버 가상화 VM(Virtual Machine) Container Docker Image Docker Container Background — 왜 도커를 써야하나? 눈송이 서버들(Snowflake Servers)&#xA;모든 눈송이의 모양이 다르듯, 서버들도 모두 다르다.&#xA;서버가 여러개인 경우, 서버 구성 시기에 따라 운영체제, 컴파일러, 설치된 패키지 등의 버전이 달라지게 된다.&#xA;눈송이 서버를 방지하기 위해, 새로 서버를 구성할 때 다양한 방식으로 서버 운영 기록을 저장해 둔다.&#xA;가상화&#xA;특정 소프트웨어 환경을 만든 후, Local 서버나 Production 서버에서 그대로 활용하는 방법.&#xA;어느 운영체제에서나 동일한 환경으로 프로그램 실행 가능</description>
    </item>
    <item>
      <title>나를 위한 Git Branch 총정리</title>
      <link>https://osmin625.github.io/posts/git_branch/</link>
      <pubDate>Sat, 08 Oct 2022 22:49:00 +0900</pubDate>
      <guid>https://osmin625.github.io/posts/git_branch/</guid>
      <description>독립적으로 특정 작업을 진행할 때 사용한다.&#xA;팀으로 여러작업 동시에 작업 가능&#xA;여러 Branch를 합치는 방법 — Merge&#xA;merge 방법에 따른 차이 merge — branch의 모든 기록 보존, merge에 대한 기록 추가. 이 방법을 사용하면 merge에 대한 commit이 하나 생성되고 어느 시점에 merge를 진행했는지 쉽게 알 수 있다. branch가 늘어나고 여러 번의 merge가 생기게 되면, 그래프가 복잡해져 **커밋 히스토리(Commit History)**를 파악하기 더욱 어려워질 수 있다. squash and merge — 여러 commit 기록 하나로 합치기, merge기록 남기지 않기.</description>
    </item>
    <item>
      <title>나를 위한 Git Flow 총정리</title>
      <link>https://osmin625.github.io/posts/git_flow/</link>
      <pubDate>Wed, 28 Sep 2022 11:41:00 +0900</pubDate>
      <guid>https://osmin625.github.io/posts/git_flow/</guid>
      <description>Local Repository 중심 Branch 관리 방법론&#xA;기능이나 프로그램이 아닌, 개발자간의 약속&#xA;물론 이를 지원하는 모듈이 존재한다.&#xA;$ apt-get install git-flow 장점&#xA;신중하다. 단점&#xA;복잡하다. 배포할 때 거쳐야 할 단계가 많다. 단계별로 관리하는 사람이 다른 경우, 특정 지점에서 병목이 발생할 수 있다. 총 5가지의 branch를 사용해서 개발이 진행된다.&#xA;master&#xA;배포의 기준이 되는 branch.&#xA;Release Tag를 기록하는 branch.&#xA;제품을 배포하는 용도.&#xA;배포용 브랜치이므로 개발자가 해당 브랜치에 직접 커밋하거나, Release 이외의 branch에서 직접 Merge할 일이 없다.</description>
    </item>
  </channel>
</rss>
